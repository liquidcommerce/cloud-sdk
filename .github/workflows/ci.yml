name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        # No version needed - reads from package.json packageManager field

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm run lint

      - name: Build package
        run: pnpm run build

      - name: Verify package can be packed
        run: pnpm pack

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: write # for semantic-release to push tags and releases
      issues: write # for semantic-release to comment on issues
      pull-requests: write # for semantic-release to comment on PRs
      id-token: write # for npm provenance

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # semantic-release needs full history
          token: ${{ secrets.TEMP_ENG_PAT_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        # No version needed - reads from package.json packageManager field

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org/'
          # Don't set NODE_AUTH_TOKEN here to avoid conflicts

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm run build

      - name: Configure npm authentication
        run: |
          # Clear any existing npm configurations to avoid conflicts
          rm -f ~/.npmrc
          rm -f ./.npmrc
          rm -f /home/runner/work/_temp/.npmrc || true

          # Create a fresh npmrc with only our token
          echo "//registry.npmjs.org/:_authToken=${{ secrets.TEMPORAL_ENGINE_NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

          # Debug: Check if token is set (without exposing it)
          if [ -n "${{ secrets.TEMPORAL_ENGINE_NPM_TOKEN }}" ]; then
            echo "NPM_TOKEN secret is set"
          else
            echo "WARNING: NPM_TOKEN secret appears to be empty"
          fi

          # Set npm config location explicitly
          export NPM_CONFIG_USERCONFIG=~/.npmrc
          echo "NPM_CONFIG_USERCONFIG=$NPM_CONFIG_USERCONFIG" >> $GITHUB_ENV

      - name: Verify npm authentication
        run: |
          # This will help debug if the token is working
          npm whoami 2>&1 || echo "npm whoami failed, but continuing..."
        env:
          NPM_TOKEN: ${{ secrets.TEMPORAL_ENGINE_NPM_TOKEN }}

      - name: Semantic Release
        run: pnpx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.TEMP_ENG_PAT_TOKEN }}
          NPM_TOKEN: ${{ secrets.TEMPORAL_ENGINE_NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.TEMPORAL_ENGINE_NPM_TOKEN }}  # Also set this for compatibility
          NPM_CONFIG_USERCONFIG: ~/.npmrc  # Explicitly set the config location
          HUSKY: 0  # Disable husky hooks in CI for semantic-release commits